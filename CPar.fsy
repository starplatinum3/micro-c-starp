%{
(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.

  （*文件micro/CPar.fsy）
小型命令式语言micro-C的解析器规范
sestoft@itu.dk * 2009-09-29
由于Niels Kokholm，没有（真正的）转移/减少冲突。

*)
open Absyn

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名
// compose1 函数 取出 类型构造子 g，用类型复合机制构造类型。
let first  (firstOne, _, _) = firstOne
let second (_, sndOne, _) = sndOne
let third  (_, _, thirdOne) = thirdOne

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10 //  \n 的 ASCII 码
%}

// 这是说他的f# 类型吗？ 不懂
// name 是什么 ,就是变量的名字 string str ，比如这样吧
%token <int> CSTINT CSTBOOL  // <int> 是词元的语义值类型
%token <string> CSTSTRING NAME
// 这里是否可以把语言的char 和f# 的char 对应？
%token <char> CSTCHAR
%token <float32> CSTFLOAT
%token PLUSASSIGN MINUSASSIGN TIMESASSIGN DIVASSIGN MODASSIGN
// 定义 token
%token CHAR ELSE IF INT NULL PRINT PRINTLN FOR RETURN VOID WHILE DOWHILE DO DOUNTIL UNTIL PRINTF  STRING PRINT_CHAR PRINT_STRING
%token PLUS MINUS TIMES DIV MOD    FLOAT STRUCT POINT BOOL 
%token SWITCH CASE DEFAULT  BREAK  CONTINUE
// %token CHAR ELSE IF INT NULL PRINT PRINTLN RETURN VOID WHILE BREAK CONTINUE
%token EQ NE GT LT GE LE PRE_INC PRE_DEC
%token NOT SEQOR SEQAND
%token LPAR RPAR LBRACE RBRACE LBRACK RBRACK SEMI COMMA ASSIGN AMP  QUESTION   COLON
%token EOF   BITAND BITOR BITXOR BITLEFT BITRIGHT BITNOT
%token TRY CATCH THROW

%right ASSIGN             /* lowest precedence */  // 最下面的优先级最高
// a= b=c 
// 先赋值后面的 b=c 
%right TO_CHAR TO_INT
// (int) a (int) b
// 先强转后面的 
%nonassoc PRINT
%right PLUSASSIGN MINUSASSIGN TIMESASSIGN DIVASSIGN MODASSIGN
// a += b += c
// 是要先处理 b+=c 的 
%left SEQOR
%left SEQAND
%left BITXOR BITOR  BITAND
// a or b or c 
// 是 a or b 先运算
%left EQ NE 
%nonassoc GT LT GE LE PRE_INC PRE_DEC
// ++ a ++ b ++c   
%left BITLEFT BITRIGHT
// a << b << c 
// 是 a << b 先运算
%left PLUS MINUS
%left TIMES DIV MOD 
%nonassoc NOT AMP   BITNOT
// c not a not b
// https://blog.csdn.net/weixin_46222091/article/details/106007305
%nonassoc LBRACK          /* highest precedence  */

%start Main            // 语法开始符号
%type <Absyn.program> Main   // 开始符号，对应抽象语法树节点类型, program

%%

Main:
    Topdecs EOF                         { Prog $1 }  // { }内是合法的F#代码
                                        // $1 是 Topdecs的语义值， Prog $1 返回抽象语法树根节点，也就是整个程序
;                                       // 规则结束符

Topdecs:
    /* empty */                         { [] }
  | Topdec Topdecs                      { $1 :: $2 }
  // 后面还有跟多的 定义 连接起来 列表
;

Topdec: 
// 定义 分号
    Vardec SEMI                         { 
      printfn $"Vardec {Vardec}"
      Vardec (fst $1, snd $1) }
  | Fundec                              { $1 }
  // struct {
  //   int a;
  // };
  | Structdec SEMI                      { Structdec(fst $1, snd $1) }
  // | VardecAndAssign SEMI                { VardecAndAssign(fst $1, snd $1 , third $1) }
  | VardecAndAssign SEMI                { VardecAndAssign(first $1, second $1 , third $1) }
;



/*                                               
变量声明  由于C 类型声明的复杂性，这里用了函数式编程的技巧来辅助类型构造

利用变量描述中的构造函数，构造类型
 { ((fst $2) $1, snd $2) }

int i;  // int  (TypI, "i")            fst (fun t->t , "i") TypI , snd (fun t->t , "i") 
int *p;   // pointer to int   (TypP TypI, "p")
int ia[10];  // array of 10 ints   (TypA (TypI, Some 10), "ia")
int* ia2;  // pointer to int   (TypP TypI, "ia2")
int *ipa[10];  // array of 10 pointers to int   (TypA (TypP TypI, Some 10), "ipa")
int (*iap)[10];  // pointer to array of 10 int    (TypP (TypA (TypI, Some 10))
*/

// 变量定义的 fir
Vardec:
    Type Vardesc                        { ((fst $2) $1, snd $2) }
;
// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名
// construct varName
VardecAndAssign:
  Type Vardesc ASSIGN Expr              { ((fst $2) $1, snd $2, $4) }
  // Type Vardesc ASSIGN Expr              { ((first $2) $1, second $2, $4) }
;
// 多了最后一个赋值

/*
 变量描述
 name 就是变量的名字
NAME  "n"   (fun t->t, "n") 返回一个元组，第一个元素，是类型构造函数，在Vardec 规则中使用
*/ 

// 变量描述
Vardesc:                         
    // "i"    标识符                        fun t->t  id 函数
    NAME                                { ((fun t -> t), $1)                      }
    // "*p"   指针标识符
    // let compose1 f (g, s) = ((fun x -> g(f(x))), s)
    //      compose1  (fun t -> TypP t) $2 ===  compose1 TypP $2 
    //       TypP 指针类型构造子 
  | TIMES Vardesc                       { compose1 TypP $2                        }  
    // (*p)   带括号的标识符                                 
  | LPAR Vardesc RPAR                   { $2                                      } 
    // ia[]   带方括号，无下标
  | Vardesc LBRACK RBRACK               { compose1 (fun t -> TypA(t, None)) $1    }
    // ia[10]   带方括号，带下标
  | Vardesc LBRACK CSTINT RBRACK        { compose1 (fun t -> TypA(t, Some $3)) $1 }
;

Structdec:
  STRUCT NAME LBRACE MemberDefList RBRACE         { ($2, $4) }
;

MemberDefList:
    /* empty */ { [] }
    // int a=1; ... int b=2;
  | Vardec SEMI MemberDefList { $1 :: $3 }
;

Fundec:
    // 返回 void 的函数
    VOID NAME LPAR Paramdecs RPAR Block { Fundec(None,     $2, $4, $6) }
    // 返回 Type 类型的函数
  | Type NAME LPAR Paramdecs RPAR Block { Fundec(Some($1), $2, $4, $6) }
;

// 参数列表
Paramdecs:
    /* empty */                         { [] }
  | Paramdecs1                          { $1 }
;

Paramdecs1:
    Vardec                              { [$1]     }
  | Vardec COMMA Paramdecs1             { $1 :: $3 }
;

// 花括号中的 语句块
Block:
    LBRACE StmtOrDecSeq RBRACE          { Block $2 }
;

// 定义？
StmtOrDecSeq:
    /* empty */                         { [] }
  | Stmt StmtOrDecSeq                   { Stmt $1 :: $2 }
  | Vardec SEMI StmtOrDecSeq            { Dec (fst $1, snd $1) :: $3 }
  // 缺了这句
  | VardecAndAssign SEMI StmtOrDecSeq   { 
    let typeName=first $1
    let varName= second $1
    // let assignMark= third $1
    let typeAndVar= third $1
    // printfn $"typeName {typeName}"
    // printfn $"varName {varName}"
    // printfn $"typeAndVar {typeAndVar}"
    // printfn $"assignMark {assignMark}"
    // StmtOrDecSeq $3
    DecAndAssign (typeName, varName ,typeAndVar) :: $3 }
    // DecAndAssign (first $1, second $1 , third $1) :: $3 }
  // 定义和设置值 然后是分号
  // 例子  int i=1 ;  int b=2;
  // 获取了 定义的类型 定义的变量名 和 
;

Stmt: 
    StmtM                               { $1 }
  | StmtU                               { $1 }
;

StmtM:  /* No unbalanced if-else */
    Expr SEMI                           { Expr($1)             }
  | RETURN SEMI                         { Return None          }
  | RETURN Expr SEMI                    { Return(Some($2))     }
  | Block                               { $1                   }
  | IF LPAR Expr RPAR StmtM ELSE StmtM  { If($3, $5, $7)       }
  | SWITCH LPAR Expr RPAR LBRACE CaseStmt RBRACE  { Switch($3,$6)  }
  // Expr ( Expr $3, CaseStmt $6) 会被注入 eval  
  // Switch(expr) {
  //    stmt
  // }
  // | Expr QUESTION Expr COLON Expr       { Prim3($1,$3,$5)     }
  // | Expr QUESTION StmtM COLON StmtM       { Prim3($1,$3,$5)     }
  | DO StmtM WHILE LPAR Expr RPAR SEMI  { DoWhile($2, $5)        }
  // 5 是判断LPAR Expr RPAR  ，左右值判断

    // https://blog.csdn.net/weixin_42804814/article/details/94913013
  // 逻辑分区  LPAR
  // 不应该啊 这里应该是 left part 和 right part 的意思吧 左值 右值
  // 这是解释还是什么 看不懂。。
  | WHILE LPAR Expr RPAR StmtM          { While($3, $5)        }
  | DO StmtM UNTIL LPAR Expr RPAR SEMI   { DoUntil($2, $5)        }
  // whilen 左值 和右值 做操作， 就做body的语句
  // while 左值 表达式 右边的值 语句 M是什么 某种指代吧 和 x类似？ 猜的。。
  | FOR LPAR Expr SEMI Expr SEMI Expr RPAR StmtM     { For($3,$5,$7,$9)  }
  // 最后是9 是body 
  | BREAK SEMI                          { Break             }
  // | CONTINUE SEMI                       { Continue }
  // CONTINUE;
  | CONTINUE SEMI                       { Continue }
  | TRY StmtM CatchStmt                 { Try($2, $3) }
  // Try($2 StmtM, $3 CatchStmt)
  
;

StmtU:
// 这里的数字是对应右边的 一个token是一个占位符
    IF LPAR Expr RPAR StmtM ELSE StmtU  { If($3, $5, $7)       }
  | IF LPAR Expr RPAR Stmt              { If($3, $5, Block []) }
  | WHILE LPAR Expr RPAR StmtU          { While($3, $5)        }
;


CatchStmt:
    CATCH LPAR EXCEPTION RPAR StmtM                { [Catch($3,$5)]     }
  | CATCH LPAR EXCEPTION RPAR StmtM CatchStmt      { Catch($3,$5) :: $6 }
;


EXCEPTION:
  CSTSTRING                                        { Exception $1 }
;


CaseStmt:
// [Case($2 AtExprNotAccess, $4 StmtM)]
// 一个列表 有多个 case 
    CASE AtExprNotAccess COLON StmtM      { [Case($2, $4)]   }  
    // case a:
    //   stmt 
  | DEFAULT COLON StmtM                   { [Default($3)]    }
  // [Default($3 StmtM)]  
  // DEFAULT: stmt
  | CASE AtExprNotAccess COLON StmtM CaseStmt      { [Case($2,$4)] @ $5  }
  // [Case($2 AtExprNotAccess,$4 StmtM)] @ $5 CaseStmt
  // 连接列表 @ 
  // case expr:
  //   StmtM
  // case expr:
  //   StmtM
  // .. 更多的 递归
;

Expr: 
    Access                              { Access $1           } //取$1的右值
  | ExprNotAccess                       { $1                  } 
;
  //非左值的情况
  // https://blog.csdn.net/coolwriter/article/details/80470852
ExprNotAccess:
    AtExprNotAccess                     { $1                  }
  | Access ASSIGN Expr                  { Assign($1, $3)      } // $1为左值
  | NAME LPAR Exprs RPAR                { Call($1, $3)        }  
  // name(a) 
  // 这是调用 调用函数不能在 = 左边吧 比如 func(a)=b 不能把一个函数调用赋值
  | PRE_INC Access                       { PreInc $2           } 
  // ++ a 
  // ++ a =3 也是不对的 
  | PRE_DEC Access                       { PreDec $2           } 
  | NOT Expr                            { Prim1("!", $2)      }
  // ！a = 1 这是不行的
  // 并不是 这里有好多调用 这有not 
  | Expr QUESTION Expr COLON Expr       { 
    printfn "xpr QUESTION Expr COLON "
    printfn $"$1 {$1}"
    Prim3($1,$3,$5)     }
    // 已经放在挺前面了
  // 表达式 ?表达式:表达式
  // 判断
  // (Expr $1) QUESTION Expr $3 COLON Expr  $5
  // Prim3($1,$3,$5)
  | Access PLUSASSIGN Expr              { OpAssign("+", $1, $3)    }
  | Access MINUSASSIGN Expr             { OpAssign("-", $1, $3)   }
  | Access TIMESASSIGN Expr             { OpAssign("*", $1, $3)   }
  | Access DIVASSIGN Expr               { OpAssign("/", $1, $3)   }
  | Access MODASSIGN Expr               { OpAssign("%", $1, $3)   }
  
  | PRINT Expr                          { Prim1("printi", $2) }
  // | PRINT_CHAR Expr                          { Prim1("printi", $2) }
  // printi 只有这里可以调用吗 外面不行。。
  // print int 然后第二个参数
  // print 会返回这个值本身 int char 返回没什么问题 但是str 返回什么
  // 参考c语言的print 的话 应该是返回1 成功 0 失败吧，其实不返回也没什么
  // printf 的返回 小问题罢了 这里我觉得别管了
  | PRINTLN                             { Prim1("printc", nl) }
  // | PRINTF LPAR CSTSTRING PrintfArgs RPAR  { 
  //   printf "调用printf\n";
  //   Printf($3, $4)
  //   }
  | PRINTF LPAR CSTSTRING PrintfArgs RPAR  { Printf($3, $4) }
    // PRINTF LPAR CSTSTRING $3 PrintfArgs $4 RPAR
    // | "printString"   -> PRINT_STRING
  | PRINT_STRING Expr   { Prim1("printc", $2)}
  | PRINT_CHAR  Expr   { Prim1("printc", $2)}
  // 这里不写大写行不行。。
  | Expr PLUS  Expr                     { Prim2("+",  $1, $3) }
  | Expr MINUS Expr                     { Prim2("-",  $1, $3) }
  | Expr TIMES Expr                     { Prim2("*",  $1, $3) }
  | Expr DIV   Expr                     { Prim2("/",  $1, $3) }
  | Expr MOD   Expr                     { Prim2("%",  $1, $3) }
  | Expr EQ    Expr                     { Prim2("==", $1, $3) }
  | Expr NE    Expr                     { Prim2("!=", $1, $3) }
  | Expr GT    Expr                     { Prim2(">",  $1, $3) }
  | Expr LT    Expr                     { Prim2("<",  $1, $3) }
  | Expr GE    Expr                     { Prim2(">=", $1, $3) }
  | Expr LE    Expr                     { Prim2("<=", $1, $3) }
  | Expr AMP Expr                       { Prim2("&", $1, $3)      }
  | Expr BITOR  Expr                    { Prim2("|", $1, $3) }
  | Expr BITXOR  Expr                   { Prim2("^", $1, $3) }
  | Expr BITLEFT  Expr                  { Prim2("<<", $1, $3) }
  | Expr BITRIGHT  Expr                 { Prim2(">>", $1, $3) }
  | BITNOT  Expr                        { Prim1("~", $2) }
  | Expr SEQAND Expr                    { Andalso($1, $3)     }
  // | LPAR TO_CHAR RPAR Expr                 { ToChar($4) }
  | LPAR CHAR RPAR Expr                 { ToChar($4) }
  // (char)var 
  | LPAR INT RPAR Expr                 { ToInt($4) }
  // (char)expr
  | Expr SEQOR  Expr                    { Orelse($1, $3)      }
  // | ConstString SEQOR  Expr                    { Orelse($1, $3)      }
;

PrintfArgs:
    /* empty */                         { [] }
  | COMMA Expr                          { [$2] }
  // 空的 和一个参数的情况不能不写
  
	// 连接两个列表。 @
  // Printf("%d",intArg,charArg);
  // 递归的 后面会有很多参数
  | COMMA Expr PrintfArgs               { [$2] @ $3 }
; 

// 让c语言解析
AtExprNotAccess:
    //不可以为左值的的基本情况 
    // Const ,  3
    // AMP Access  , &x
    // (3)   
    Const                               { CstI $1             }
    // 不能给一个const int 赋值，因为他本身就是定义好的
    // 只能给一个变量赋值
    // int intVal=2; 比如这里的 intVal是左值，2 是一个const int 
    // 他不可能是 2=3 ，2 是不能为左值的 
    // 访问 Access，但是为啥 他是访问 一个右值难道不能被访问吗
    // 被取出值来 难道不对吗 可能我的理解有问题
  | LPAR ExprNotAccess RPAR             { $2                  } 
  | AMP Access                          { Addr $2             } // 取地址
  // | ConstChar                           { CstChar($1) }
  | ConstChar                           { CstChar $1 }
  | ConstFloat                          { ConstFloat($1)      }
  // Absyn.fs 调用了这个文件
  // 表达式去取
  // 这里不写的话 就不会去解析了吧
  | ConstString { CstString($1) }      
  // | ConstString                         { CstS $1 }           
;

Access:    //可以为左值的情况
    NAME                                { AccVar $1           }  // 变量 x
  | LPAR Access RPAR                    { $2                  }  // 括号中的变量 (x)
  | TIMES Access                        { AccDeref (Access $2)}  // 指针  *x 
  | TIMES AtExprNotAccess               { AccDeref $2         }
  | Access LBRACK Expr RBRACK           { AccIndex($1, $3)    }   
  | Access POINT Access                 { AccStruct($1, $3) }
;

Exprs:
    /* empty */                         { []       }
  | Exprs1                              { $1       }
;

Exprs1:
    Expr                                { [$1]     }
  | Expr COMMA Exprs1                   { $1 :: $3 }
;

Const:
    CSTINT                              { $1       }
  | CSTBOOL                             { $1       }
  | MINUS CSTINT                        { 
    printfn "MINUS CSTINT"
    -$2     }
  // | MINUS CSTINT                        { - $2     }
    // D:\school\compile\plzoofs\microc\CPar.fsy(411,28): error FS0001: 
    // 类型“int”与类型“unit”不匹配 [D:\school\compile\plzoofs\microc\microc.fsproj]
  | NULL                                { -1       }
  // | CSTSTRING                              { $1       }
  //  D:\proj\compile\plzoofs\microc\CPar.fsy(236,67): error FS0001:
  //  此表达式应具有类型    “int”    而此处具有类型    “string” [D:\proj\compile\plzoofs\microc\interpc.fsproj]
;

ConstString:
    CSTSTRING                           { $1       }
;

ConstFloat:
    CSTFLOAT                            { $1       }
; 


ConstChar:
  CSTCHAR                               { $1       }
;

Type:
    INT                                 { TypI     }
  | CHAR                                { TypC     }
  // | TO_CHAR                                { TypC     }
  | STRING                              { TypString     }
  | FLOAT                               { TypFloat     }
  | BOOL                                { TypBool    }
  | STRUCT NAME                         { TypStruct $2 }
  // 定义的类型 可以在 interp 声明
;
