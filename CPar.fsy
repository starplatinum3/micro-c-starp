%{
(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.

  （*文件micro/CPar.fsy）
小型命令式语言micro-C的解析器规范
sestoft@itu.dk * 2009-09-29
由于Niels Kokholm，没有（真正的）转移/减少冲突。

*)
open Absyn

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名
// compose1 函数 取出 类型构造子 g，用类型复合机制构造类型。

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10 //  \n 的 ASCII 码
%}

// 这是说他的f# 类型吗？ 不懂
// name 是什么
%token <int> CSTINT CSTBOOL  // <int> 是词元的语义值类型
%token <string> CSTSTRING NAME
// 这里是否可以把语言的char 和f# 的char 对应？
%token <char> CSTCHAR

// 定义 token
%token CHAR ELSE IF INT NULL PRINT PRINTLN FOR RETURN VOID WHILE DOWHILE DO DOUNTIL UNTIL PRINTF  STRING PRINT_CHAR
%token PLUS MINUS TIMES DIV MOD
%token EQ NE GT LT GE LE
%token NOT SEQOR SEQAND
%token LPAR RPAR LBRACE RBRACE LBRACK RBRACK SEMI COMMA ASSIGN AMP  QUESTION   COLON
%token EOF

%right ASSIGN             /* lowest precedence */  // 最下面的优先级最高
%nonassoc PRINT
%left SEQOR
%left SEQAND
%left EQ NE 
%nonassoc GT LT GE LE
%left PLUS MINUS
%left TIMES DIV MOD 
%nonassoc NOT AMP 
%nonassoc LBRACK          /* highest precedence  */

%start Main            // 语法开始符号
%type <Absyn.program> Main   // 开始符号，对应抽象语法树节点类型, program

%%

Main:
    Topdecs EOF                         { Prog $1 }  // { }内是合法的F#代码
                                        // $1 是 Topdecs的语义值， Prog $1 返回抽象语法树根节点，也就是整个程序
;                                       // 规则结束符

Topdecs:
    /* empty */                         { [] }
  | Topdec Topdecs                      { $1 :: $2 }
;

Topdec: 
    Vardec SEMI                         { Vardec (fst $1, snd $1) }
  | Fundec                              { $1 }
;

/*                                               
变量声明  由于C 类型声明的复杂性，这里用了函数式编程的技巧来辅助类型构造

利用变量描述中的构造函数，构造类型
 { ((fst $2) $1, snd $2) }

int i;  // int  (TypI, "i")            fst (fun t->t , "i") TypI , snd (fun t->t , "i") 
int *p;   // pointer to int   (TypP TypI, "p")
int ia[10];  // array of 10 ints   (TypA (TypI, Some 10), "ia")
int* ia2;  // pointer to int   (TypP TypI, "ia2")
int *ipa[10];  // array of 10 pointers to int   (TypA (TypP TypI, Some 10), "ipa")
int (*iap)[10];  // pointer to array of 10 int    (TypP (TypA (TypI, Some 10))
*/

Vardec:
    Type Vardesc                        { ((fst $2) $1, snd $2) }
;

/*
 变量描述
 name 就是变量的名字
NAME  "n"   (fun t->t, "n") 返回一个元组，第一个元素，是类型构造函数，在Vardec 规则中使用
*/ 

// 变量描述
Vardesc:                         
    // "i"    标识符                        fun t->t  id 函数
    NAME                                { ((fun t -> t), $1)                      }
    // "*p"   指针标识符
    // let compose1 f (g, s) = ((fun x -> g(f(x))), s)
    //      compose1  (fun t -> TypP t) $2 ===  compose1 TypP $2 
    //       TypP 指针类型构造子 
  | TIMES Vardesc                       { compose1 TypP $2                        }  
    // (*p)   带括号的标识符                                 
  | LPAR Vardesc RPAR                   { $2                                      } 
    // ia[]   带方括号，无下标
  | Vardesc LBRACK RBRACK               { compose1 (fun t -> TypA(t, None)) $1    }
    // ia[10]   带方括号，带下标
  | Vardesc LBRACK CSTINT RBRACK        { compose1 (fun t -> TypA(t, Some $3)) $1 }
;

Fundec:
    // 返回 void 的函数
    VOID NAME LPAR Paramdecs RPAR Block { Fundec(None,     $2, $4, $6) }
    // 返回 Type 类型的函数
  | Type NAME LPAR Paramdecs RPAR Block { Fundec(Some($1), $2, $4, $6) }
;

// 参数列表
Paramdecs:
    /* empty */                         { [] }
  | Paramdecs1                          { $1 }
;

Paramdecs1:
    Vardec                              { [$1]     }
  | Vardec COMMA Paramdecs1             { $1 :: $3 }
;

// 花括号中的 语句块
Block:
    LBRACE StmtOrDecSeq RBRACE          { Block $2 }
;

// 定义？
StmtOrDecSeq:
    /* empty */                         { [] }
  | Stmt StmtOrDecSeq                   { Stmt $1 :: $2 }
  | Vardec SEMI StmtOrDecSeq            { Dec (fst $1, snd $1) :: $3 }
;

Stmt: 
    StmtM                               { $1 }
  | StmtU                               { $1 }
;

StmtM:  /* No unbalanced if-else */
    Expr SEMI                           { Expr($1)             }
  | RETURN SEMI                         { Return None          }
  | RETURN Expr SEMI                    { Return(Some($2))     }
  | Block                               { $1                   }
  | IF LPAR Expr RPAR StmtM ELSE StmtM  { If($3, $5, $7)       }
  // | Expr QUESTION Expr COLON Expr       { Prim3($1,$3,$5)     }
  // | Expr QUESTION StmtM COLON StmtM       { Prim3($1,$3,$5)     }
  | DO StmtM WHILE LPAR Expr RPAR SEMI  { DoWhile($2, $5)        }
  // 5 是判断LPAR Expr RPAR  ，左右值判断

    // https://blog.csdn.net/weixin_42804814/article/details/94913013
  // 逻辑分区  LPAR
  // 不应该啊 这里应该是 left part 和 right part 的意思吧 左值 右值
  // 这是解释还是什么 看不懂。。
  | WHILE LPAR Expr RPAR StmtM          { While($3, $5)        }
  | DO StmtM UNTIL LPAR Expr RPAR SEMI   { DoUntil($2, $5)        }
  // whilen 左值 和右值 做操作， 就做body的语句
  // while 左值 表达式 右边的值 语句 M是什么 某种指代吧 和 x类似？ 猜的。。
  | FOR LPAR Expr SEMI Expr SEMI Expr RPAR StmtM     { For($3,$5,$7,$9)  }
  // 最后是9 是body 
;

StmtU:
// 这里的数字是对应右边的 一个token是一个占位符
    IF LPAR Expr RPAR StmtM ELSE StmtU  { If($3, $5, $7)       }
  | IF LPAR Expr RPAR Stmt              { If($3, $5, Block []) }
  | WHILE LPAR Expr RPAR StmtU          { While($3, $5)        }
;

Expr: 
    Access                              { Access $1           } //取$1的右值
  | ExprNotAccess                       { $1                  } 
;
  //非左值的情况
ExprNotAccess:
    AtExprNotAccess                     { $1                  }
  | Access ASSIGN Expr                  { Assign($1, $3)      } // $1为左值
  | NAME LPAR Exprs RPAR                { Call($1, $3)        }  
  | NOT Expr                            { Prim1("!", $2)      }
  | Expr QUESTION Expr COLON Expr       { Prim3($1,$3,$5)     }
  // 表达式 ?表达式:表达式
  // 判断
  
  | PRINT Expr                          { Prim1("printi", $2) }
  // printi 只有这里可以调用吗 外面不行。。
  // print int 然后第二个参数
  | PRINTLN                             { Prim1("printc", nl) }
  | PRINTF LPAR CSTSTRING PrintfArgs RPAR  { Printf($3, $4)}
  | PRINT_CHAR  Expr   { Prim1("printc", $2)}
  // 这里不写大写行不行。。
  | Expr PLUS  Expr                     { Prim2("+",  $1, $3) }
  | Expr MINUS Expr                     { Prim2("-",  $1, $3) }
  | Expr TIMES Expr                     { Prim2("*",  $1, $3) }
  | Expr DIV   Expr                     { Prim2("/",  $1, $3) }
  | Expr MOD   Expr                     { Prim2("%",  $1, $3) }
  | Expr EQ    Expr                     { Prim2("==", $1, $3) }
  | Expr NE    Expr                     { Prim2("!=", $1, $3) }
  | Expr GT    Expr                     { Prim2(">",  $1, $3) }
  | Expr LT    Expr                     { Prim2("<",  $1, $3) }
  | Expr GE    Expr                     { Prim2(">=", $1, $3) }
  | Expr LE    Expr                     { Prim2("<=", $1, $3) }
  | Expr SEQAND Expr                    { Andalso($1, $3)     }
  | Expr SEQOR  Expr                    { Orelse($1, $3)      }
  // | ConstString SEQOR  Expr                    { Orelse($1, $3)      }
;

PrintfArgs:
	// 连接两个列表。 @
  // Printf("%d",intArg,charArg);
  // 递归的 后面会有很多参数
  | COMMA Expr PrintfArgs               { [$2] @ $3 }
; 
AtExprNotAccess:
    //不可以为左值的的基本情况 
    // Const ,  3
    // AMP Access  , &x
    // (3)   
    Const                               { CstI $1             }
  | LPAR ExprNotAccess RPAR             { $2                  } 
  | AMP Access                          { Addr $2             } // 取地址
  // | ConstChar                           { CstChar($1) }
  | ConstChar                           { CstChar $1 }
  // 表达式去取
  | ConstString { CstString($1) }      
  // | ConstString                         { CstS $1 }           
;

Access:    //可以为左值的情况
    NAME                                { AccVar $1           }  // 变量 x
  | LPAR Access RPAR                    { $2                  }  // 括号中的变量 (x)
  | TIMES Access                        { AccDeref (Access $2)}  // 指针  *x 
  | TIMES AtExprNotAccess               { AccDeref $2         }
  | Access LBRACK Expr RBRACK           { AccIndex($1, $3)    }   
;

Exprs:
    /* empty */                         { []       }
  | Exprs1                              { $1       }
;

Exprs1:
    Expr                                { [$1]     }
  | Expr COMMA Exprs1                   { $1 :: $3 }
;

Const:
    CSTINT                              { $1       }
  | CSTBOOL                             { $1       }
  | MINUS CSTINT                        { - $2     }
  | NULL                                { -1       }
  // | CSTSTRING                              { $1       }
  //  D:\proj\compile\plzoofs\microc\CPar.fsy(236,67): error FS0001: 此表达式应具有类型    “int”    而此处具有类型    “string” [D:\proj\compile\plzoofs\microc\interpc.fsproj]
;

ConstString:
    CSTSTRING                           { $1       }
;

ConstChar:
  CSTCHAR                               { $1       }
;

Type:
    INT                                 { TypI     }
  | CHAR                                { TypC     }
  | STRING                              { TypString     }
;
